/**
 * This file was automatically generated by GraphQL Nexus
 * Do not make changes to this file directly
 */

import * as ctx from "../context"
import { core } from "nexus"
declare global {
  interface NexusGenCustomInputMethods<TypeName extends string> {
    date<FieldName extends string>(fieldName: FieldName, opts?: core.ScalarInputFieldConfig<core.GetGen3<"inputTypes", TypeName, FieldName>>): void // "Date";
  }
}
declare global {
  interface NexusGenCustomOutputMethods<TypeName extends string> {
    date<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "Date";
  }
}


declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
}

export interface NexusGenEnums {
  ClassEnum: "BUSINESS" | "ECO"
}

export interface NexusGenRootTypes {
  AvailableFlight: { // root type
    availableSeats: NexusGenRootTypes['Seat'][]; // [Seat!]!
    destination: string; // String!
    id: string; // ID!
    origin: string; // String!
  }
  Mutation: {};
  Query: {};
  Seat: { // root type
    available: number; // Int!
    class: NexusGenEnums['ClassEnum']; // ClassEnum!
    price: number; // Int!
    total: number; // Int!
  }
  String: string;
  Int: number;
  Float: number;
  Boolean: boolean;
  ID: string;
  Date: Date;
}

export interface NexusGenAllTypes extends NexusGenRootTypes {
  ClassEnum: NexusGenEnums['ClassEnum'];
}

export interface NexusGenFieldTypes {
  AvailableFlight: { // field return type
    availableSeats: NexusGenRootTypes['Seat'][]; // [Seat!]!
    destination: string; // String!
    id: string; // ID!
    origin: string; // String!
  }
  Mutation: { // field return type
    bookFlight: boolean; // Boolean!
  }
  Query: { // field return type
    allAvailableFlights: NexusGenRootTypes['AvailableFlight'][]; // [AvailableFlight!]!
  }
  Seat: { // field return type
    available: number; // Int!
    class: NexusGenEnums['ClassEnum']; // ClassEnum!
    price: number; // Int!
    total: number; // Int!
  }
}

export interface NexusGenArgTypes {
  Mutation: {
    bookFlight: { // args
      class: NexusGenEnums['ClassEnum']; // ClassEnum!
      date: any; // Date!
      expectedPrice: number; // Int!
      flightId: string; // String!
      name: string; // String!
    }
  }
  Query: {
    allAvailableFlights: { // args
      date: any; // Date!
    }
  }
}

export interface NexusGenAbstractResolveReturnTypes {
}

export interface NexusGenInheritedFields {}

export type NexusGenObjectNames = "AvailableFlight" | "Mutation" | "Query" | "Seat";

export type NexusGenInputNames = never;

export type NexusGenEnumNames = "ClassEnum";

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = "Boolean" | "Date" | "Float" | "ID" | "Int" | "String";

export type NexusGenUnionNames = never;

export interface NexusGenTypes {
  context: ctx.Context;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  allTypes: NexusGenAllTypes;
  inheritedFields: NexusGenInheritedFields;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractResolveReturn: NexusGenAbstractResolveReturnTypes;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
}